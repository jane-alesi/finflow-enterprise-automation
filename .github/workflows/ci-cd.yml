name: FinFlow CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run Maven Compile
        run: mvn clean compile -B
      
      - name: Run Unit Tests
        run: mvn test -B
      
      - name: Run Integration Tests
        run: mvn verify -P integration-tests -B
      
      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressionFile=.github/owasp-suppressions.xml
      
      - name: Upload OWASP Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: java
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Compliance Validation Job
  compliance-validation:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Validate Compliance Rules
        run: |
          echo "Running compliance validation using compliance-engine..."
          mvn spring-boot:run -pl core/compliance-engine -Dspring-boot.run.arguments="--finflow.compliance.regulations.enabled=MiFID II,PSD3,GDPR,ESG"
      
      - name: Generate Compliance Report
        run: |
          echo "Generating compliance report..."
          mkdir -p target/compliance
          echo "Compliance validation passed" > target/compliance/report.txt
          # TODO: Integrate actual report generation from compliance-engine
      
      - name: Upload Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: target/compliance/

  # Docker Build Job
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{branch}}-          
      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment Job (Development)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker-build, compliance-validation]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Deploy to Development Environment
        run: |
          echo "Deploying to development environment..."
          # Placeholder for actual Kubernetes deployment
          echo "kubectl apply -f deployment/k8s/development/"
          # kubectl apply -f deployment/k8s/development/
      
      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests..."
          # Placeholder for actual smoke tests
          echo "mvn test -Dtest=SmokeTestSuite"
          # mvn test -Dtest=SmokeTestSuite

  # Deployment Job (Production)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, compliance-validation]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          # Placeholder for actual Kubernetes deployment
          echo "kubectl apply -f deployment/k8s/production/"
          # kubectl apply -f deployment/k8s/production/
      
      - name: Run Health Checks
        run: |
          echo "Running health checks..."
          # Placeholder for actual health checks
          echo "curl -f http://finflow-api/actuator/health"
          # curl -f http://finflow-api/actuator/health
